-- Create a copy of the original dataset
CREATE TABLE staging_table AS 
SELECT * FROM  ev_population;

-- Drop unnecessary columns
ALTER TABLE staging_table
DROP COLUMN "Clean Alternative Fuel Vehicle (CAFV) Eligibility",
DROP COLUMN "Electric Utility",
DROP COLUMN "2020 Census Tract",
DROP COLUMN "Base MSRP";

-- Confirm columns have been dropped
SELECT * FROM staging_table LIMIT 5;

-- Rename columns
ALTER TABLE staging_table RENAME COLUMN "VIN (1-10)" TO vin;
ALTER TABLE staging_table RENAME COLUMN "Postal Code" TO postal_code;
ALTER TABLE staging_table RENAME COLUMN "Model Year" TO model_year;	
ALTER TABLE staging_table RENAME COLUMN "Electric Vehicle Type" TO ev_type;	
ALTER TABLE staging_table RENAME COLUMN "Electric Range" TO electric_range;	
ALTER TABLE staging_table RENAME COLUMN "Legislative District" TO legislative_district;	
ALTER TABLE staging_table RENAME COLUMN "DOL Vehicle ID" TO dol_vehicle_id;	
ALTER TABLE staging_table RENAME COLUMN "Vehicle Location" TO vehicle_loc;	

-- Check for duplicate rows
SELECT
	COUNT(*) AS original_row_count,
	(SELECT COUNT(*) FROM (SELECT DISTINCT * FROM staging_table) AS distinct_subquery) AS distinct_row_count
FROM staging_table;

-- Check for missing values
-- Auto generate queries in string format to check each column for null values
SELECT
	E'SELECT \n' ||
	string_agg(
		'	COUNT(*) FILTER (WHERE ' || column_name || ' IS NULL) AS ' || column_name || '_nulls', 
		E',\n '
	) || 
	E'\nFROM staging_table'
FROM information_schema.columns
WHERE table_name = 'staging_table';

-- Paste autogenerated queries to check for missing values in each column
SELECT 
	COUNT(*) FILTER (WHERE base_msrp IS NULL) AS base_msrp_nulls,
 	COUNT(*) FILTER (WHERE legislative_district IS NULL) AS legislative_district_nulls,
 	COUNT(*) FILTER (WHERE model_year IS NULL) AS model_year_nulls,
 	COUNT(*) FILTER (WHERE electric_range IS NULL) AS electric_range_nulls,
 	COUNT(*) FILTER (WHERE postal_code IS NULL) AS postal_code_nulls,
 	COUNT(*) FILTER (WHERE make IS NULL) AS make_nulls,
 	COUNT(*) FILTER (WHERE model IS NULL) AS model_nulls,
 	COUNT(*) FILTER (WHERE ev_type IS NULL) AS ev_type_nulls,
 	COUNT(*) FILTER (WHERE dol_vehicle_id IS NULL) AS dol_vehicle_id_nulls,
 	COUNT(*) FILTER (WHERE vin IS NULL) AS vin_nulls,
 	COUNT(*) FILTER (WHERE vehicle_loc IS NULL) AS vehicle_loc_nulls,
 	COUNT(*) FILTER (WHERE county IS NULL) AS county_nulls,
 	COUNT(*) FILTER (WHERE city IS NULL) AS city_nulls,
 	COUNT(*) FILTER (WHERE state IS NULL) AS state_nulls
FROM staging_table;

-- Check electric_range for null values
SELECT * FROM staging_table WHERE electric_range IS NULL;
-- 2 rows have a null electric_range featuring a 2024 Mercedes-Benz S-Class, a quick search revealed that it has an electric range of 46 miles
UPDATE staging_table SET electric_range = 46 WHERE electric_range IS NULL;

-- Check base_msrp for null values
SELECT * FROM staging_table WHERE base_msrp IS NULL;
-- 2 rows have a null base_msrp featuring a 2024 Mercedes-Benz S-Class, a quick search revealed that the base msrp is $117,300
UPDATE staging_table SET base_msrp = 117300 WHERE base_msrp IS NULL;

-- Check legislative_district for null values
SELECT * FROM staging_table WHERE legislative_district IS NULL;
DELETE FROM staging_table WHERE legislative_district IS NULL;

-- Check vehicle_loc for null values
SELECT * FROM staging_table WHERE vehicle_loc IS NULL;
-- Check unique vehicle_loc values
SELECT DISTINCT(vehicle_loc) FROM staging_table;
-- Remove null vehicle_loc rows
DELETE FROM staging_table WHERE vehicle_loc IS NULL;

-- Check for consistent formatting in text columns
SELECT DISTINCT county FROM staging_table;
SELECT DISTINCT city FROM staging_table;
SELECT DISTINCT make FROM staging_table;
SELECT DISTINCT model FROM staging_table;
SELECT DISTINCT ev_type FROM staging_table;
SELECT DISTINCT dol_vehicle_id FROM staging_table;

-- Convert dol_vehicle_id from text to integer type
ALTER TABLE staging_table
ALTER COLUMN dol_vehicle_id TYPE INT
USING dol_vehicle_id::integer;

-- Create a longitude and latitude column
ALTER TABLE staging_table
ADD COLUMN longitude numeric;

ALTER TABLE staging_table
ADD COLUMN latitude numeric;

-- Update longitude and latitude extracted from vehicle_loc column
WITH coords AS (
	SELECT
		dol_vehicle_id,
		REPLACE(SPLIT_PART(vehicle_loc, ' ', 2), '(', '')::numeric AS longitude, 
		REPLACE(SPLIT_PART(vehicle_loc, ' ', 3), ')', '')::numeric AS latitude
	FROM staging_table
)
UPDATE staging_table
SET
	longitude = coords.longitude,
	latitude = coords.latitude
FROM coords
WHERE staging_table.dol_vehicle_id = coords.dol_vehicle_id;

-- Drop vehicle_loc since we have long and lat columns
ALTER TABLE staging_table
DROP COLUMN vehicle_loc;

-- Rename staging table to be used for analysis
ALTER TABLE staging_table RENAME TO ev_pop;

SELECT * FROM ev_pop LIMIT 5;